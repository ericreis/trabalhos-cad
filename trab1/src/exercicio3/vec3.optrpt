
    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/3=33.3%] vec3.cpp(17,1)
  -> EXTERN: (24,19) _mm_malloc(unsigned long, unsigned long)
  -> EXTERN: (25,20) malloc(size_t)
  -> INLINE: (30,2) setup(float **) (isz = 59) (sz = 64)
    -> EXTERN: (63,18) rand()
  -> EXTERN: (49,2) free(void *)
  -> EXTERN: (50,2) _mm_free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at vec3.cpp(27,2)
<Peeled>
LOOP END

LOOP BEGIN at vec3.cpp(27,2)
   remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(28,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 1.490 
   remark #15479: lightweight vector operations: 7 
   remark #15480: medium-overhead vector operations: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=50
LOOP END

LOOP BEGIN at vec3.cpp(27,2)
<Remainder>
LOOP END

LOOP BEGIN at vec3.cpp(58,2) inlined into vec3.cpp(30,2)
   remark #15382: vectorization support: call to function rand() cannot be vectorized   [ vec3.cpp(63,18) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 63 and  line 63
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 63 and  line 63

   LOOP BEGIN at vec3.cpp(61,3) inlined into vec3.cpp(30,2)
      remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ vec3.cpp(63,18) ]
   LOOP END
LOOP END

LOOP BEGIN at vec3.cpp(32,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at vec3.cpp(35,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at vec3.cpp(39,4)
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15388: vectorization support: reference table has aligned access   [ vec3.cpp(41,5) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 13 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 339 
         remark #15477: vector loop cost: 81.500 
         remark #15478: estimated potential speedup: 4.150 
         remark #15479: lightweight vector operations: 53 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=8750
      LOOP END

      LOOP BEGIN at vec3.cpp(39,4)
      <Remainder>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: setup(float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (setup(float **)) [2/3=66.7%] vec3.cpp(56,1)
  -> EXTERN: (63,18) rand()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at vec3.cpp(58,2)
   remark #15382: vectorization support: call to function rand() cannot be vectorized   [ vec3.cpp(63,18) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 63 and  line 63
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 63 and  line 63

   LOOP BEGIN at vec3.cpp(61,3)
      remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ vec3.cpp(63,18) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [3/3=100.0%] <compiler generated>
  -> EXTERN: /usr/include/c++/4.3/iostream:(77,25) __cxa_atexit()
  -> EXTERN: /usr/include/c++/4.3/iostream:(77,25) std::ios_base::Init::Init(std::ios_base::Init *)

===========================================================================
